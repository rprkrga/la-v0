import React, { useState, useRef } from 'react';
import { Plus, Edit3, Trash2, Link2, Download, Upload, Image, ExternalLink, ChevronDown, ChevronRight } from 'lucide-react';

const LeadershipTaxonomyManager = () => {
  // Initialize with seed data
  const seedData = [
    {
      id: '1',
      name: 'Emotional Intelligence',
      type: 'trait',
      level: 0,
      parentId: null,
      description: 'The ability to understand and manage emotions effectively',
      notes: 'Critical for leadership success, involves self-awareness, self-regulation, motivation, empathy, and social skills.',
      links: [],
      images: [],
      children: [
        {
          id: '1-1',
          name: 'Self-Awareness',
          type: 'characteristic',
          level: 1,
          parentId: '1',
          description: 'Understanding one\'s own emotions, strengths, and weaknesses',
          notes: 'Foundation of emotional intelligence. Leaders who are self-aware make better decisions.',
          links: [],
          images: [],
          children: []
        },
        {
          id: '1-2',
          name: 'Empathy',
          type: 'characteristic',
          level: 1,
          parentId: '1',
          description: 'Understanding and sharing the feelings of others',
          notes: 'Essential for building trust and rapport with team members.',
          links: [],
          images: [],
          children: []
        }
      ]
    },
    {
      id: '2',
      name: 'Communication Skills',
      type: 'trait',
      level: 0,
      parentId: null,
      description: 'Ability to convey information clearly and effectively',
      notes: 'Fundamental leadership skill encompassing verbal, non-verbal, and written communication.',
      links: [],
      images: [],
      children: [
        {
          id: '2-1',
          name: 'Active Listening',
          type: 'characteristic',
          level: 1,
          parentId: '2',
          description: 'Fully concentrating on and understanding what others are saying',
          notes: 'Shows respect and helps leaders gather important information.',
          links: [],
          images: [],
          children: []
        },
        {
          id: '2-2',
          name: 'Public Speaking',
          type: 'characteristic',
          level: 1,
          parentId: '2',
          description: 'Ability to speak confidently to groups',
          notes: 'Critical for inspiring and motivating teams and stakeholders.',
          links: [],
          images: [],
          children: []
        }
      ]
    },
    {
      id: '3',
      name: 'Decision Making',
      type: 'trait',
      level: 0,
      parentId: null,
      description: 'Ability to make sound choices quickly and effectively',
      notes: 'Core leadership responsibility involving analysis, judgment, and accountability.',
      links: [],
      images: [],
      children: [
        {
          id: '3-1',
          name: 'Strategic Thinking',
          type: 'characteristic',
          level: 1,
          parentId: '3',
          description: 'Ability to see the big picture and plan long-term',
          notes: 'Helps leaders anticipate challenges and opportunities.',
          links: [],
          images: [],
          children: []
        },
        {
          id: '3-2',
          name: 'Risk Assessment',
          type: 'characteristic',
          level: 1,
          parentId: '3',
          description: 'Evaluating potential risks and rewards',
          notes: 'Essential for making informed decisions under uncertainty.',
          links: [],
          images: [],
          children: []
        }
      ]
    },
    {
      id: '4',
      name: 'Adaptability',
      type: 'trait',
      level: 0,
      parentId: null,
      description: 'Flexibility in changing circumstances',
      notes: 'Crucial in today\'s rapidly changing business environment.',
      links: [],
      images: [],
      children: [
        {
          id: '4-1',
          name: 'Resilience',
          type: 'characteristic',
          level: 1,
          parentId: '4',
          description: 'Ability to bounce back from setbacks',
          notes: 'Helps leaders maintain composure and continue moving forward despite challenges.',
          links: [],
          images: [],
          children: []
        }
      ]
    },
    {
      id: '5',
      name: 'Vision and Purpose',
      type: 'concept',
      level: 0,
      parentId: null,
      description: 'Clear sense of direction and meaning',
      notes: 'Leaders must articulate compelling visions that inspire others to follow.',
      links: [],
      images: [],
      children: [
        {
          id: '5-1',
          name: 'Inspirational Motivation',
          type: 'characteristic',
          level: 1,
          parentId: '5',
          description: 'Ability to energize and motivate others toward a common goal',
          notes: 'Transforms vision into action through inspiration.',
          links: [],
          images: [],
          children: []
        }
      ]
    },
    {
      id: '6',
      name: 'Steve Jobs at Apple',
      type: 'story',
      level: 0,
      parentId: null,
      description: 'Transformational leadership through innovation and vision',
      notes: 'Example of visionary leadership that revolutionized multiple industries. Demonstrated both strengths and challenges of demanding leadership styles.',
      links: [],
      images: [],
      children: []
    }
  ];

  const seedRelationships = [
    {
      id: 'rel-1',
      fromId: '1-2', // Empathy
      toId: '2-1', // Active Listening
      strength: 8,
      qualities: ['Supportive', 'Complementary']
    },
    {
      id: 'rel-2',
      fromId: '3-1', // Strategic Thinking
      toId: '5', // Vision and Purpose
      strength: 9,
      qualities: ['Foundational', 'Causal']
    },
    {
      id: 'rel-3',
      fromId: '4-1', // Resilience
      toId: '3', // Decision Making
      strength: 7,
      qualities: ['Supportive', 'Contextual']
    },
    {
      id: 'rel-4',
      fromId: '1', // Emotional Intelligence
      toId: '2', // Communication Skills
      strength: 8,
      qualities: ['Complementary', 'Supportive']
    }
  ];

  const [taxonomy, setTaxonomy] = useState(seedData);
  const [relationships, setRelationships] = useState(seedRelationships);
  const [selectedItem, setSelectedItem] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState('add'); // 'add', 'edit', 'relationship', 'editRelationship'
  const [showRelationships, setShowRelationships] = useState(false);
  const [activeTab, setActiveTab] = useState('taxonomy'); // 'taxonomy', 'visualization'
  const [expandedItems, setExpandedItems] = useState(new Set());
  const fileInputRef = useRef(null);

  // Form state
  const [formData, setFormData] = useState({
    id: '',
    name: '',
    type: 'trait', // trait, characteristic, concept, story
    level: 0,
    parentId: null,
    description: '',
    notes: '',
    links: [],
    images: []
  });

  const [relationshipForm, setRelationshipForm] = useState({
    id: '',
    fromId: '',
    toId: '',
    strength: 5, // 1-10 scale
    qualities: []
  });

  const relationshipQualities = [
    'Complementary', 'Contradictory', 'Supportive', 'Dependent', 'Causal',
    'Hierarchical', 'Parallel', 'Temporal', 'Contextual', 'Foundational'
  ];

  const itemTypes = [
    { value: 'trait', label: 'Leadership Trait', color: 'bg-blue-100 text-blue-800' },
    { value: 'characteristic', label: 'Characteristic', color: 'bg-green-100 text-green-800' },
    { value: 'concept', label: 'Concept', color: 'bg-purple-100 text-purple-800' },
    { value: 'story', label: 'Story', color: 'bg-orange-100 text-orange-800' }
  ];

  const generateId = () => Date.now().toString();

  const resetForm = () => {
    setFormData({
      id: '',
      name: '',
      type: 'trait',
      level: 0,
      parentId: null,
      description: '',
      notes: '',
      links: [],
      images: []
    });
  };

  const openModal = (type, item = null, parentId = null) => {
    setModalType(type);
    if (type === 'add') {
      resetForm();
      if (parentId) {
        const parent = findItemById(parentId);
        setFormData(prev => ({
          ...prev,
          parentId,
          level: parent ? parent.level + 1 : 0
        }));
      }
    } else if (type === 'edit' && item) {
      setFormData({ ...item });
    } else if (type === 'relationship') {
      setRelationshipForm({
        id: '',
        fromId: item ? item.id : '',
        toId: '',
        strength: 5,
        qualities: []
      });
    } else if (type === 'editRelationship' && item) {
      setRelationshipForm({ ...item });
    }
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    resetForm();
    setSelectedItem(null);
  };

  const findItemById = (id) => {
    const search = (items) => {
      for (const item of items) {
        if (item.id === id) return item;
        if (item.children) {
          const found = search(item.children);
          if (found) return found;
        }
      }
      return null;
    };
    return search(taxonomy);
  };

  const addOrUpdateItem = () => {
    if (!formData.name.trim()) return;

    const item = {
      ...formData,
      id: formData.id || generateId(),
      children: formData.children || []
    };

    if (modalType === 'add') {
      if (item.parentId) {
        setTaxonomy(prev => addChildToParent(prev, item.parentId, item));
      } else {
        setTaxonomy(prev => [...prev, item]);
      }
    } else {
      setTaxonomy(prev => updateItemInTree(prev, item));
    }

    closeModal();
  };

  const addChildToParent = (items, parentId, newItem) => {
    return items.map(item => {
      if (item.id === parentId) {
        return {
          ...item,
          children: [...(item.children || []), newItem]
        };
      }
      if (item.children) {
        return {
          ...item,
          children: addChildToParent(item.children, parentId, newItem)
        };
      }
      return item;
    });
  };

  const updateItemInTree = (items, updatedItem) => {
    return items.map(item => {
      if (item.id === updatedItem.id) {
        return { ...updatedItem, children: item.children };
      }
      if (item.children) {
        return {
          ...item,
          children: updateItemInTree(item.children, updatedItem)
        };
      }
      return item;
    });
  };

  const deleteRelationship = (relationshipId) => {
    setRelationships(prev => prev.filter(rel => rel.id !== relationshipId));
  };

  const deleteItem = (id) => {
    setTaxonomy(prev => removeItemFromTree(prev, id));
    setRelationships(prev => prev.filter(rel => rel.fromId !== id && rel.toId !== id));
  };

  const removeItemFromTree = (items, id) => {
    return items.filter(item => item.id !== id).map(item => ({
      ...item,
      children: item.children ? removeItemFromTree(item.children, id) : []
    }));
  };

  const addRelationship = () => {
    if (!relationshipForm.fromId || !relationshipForm.toId) return;
    
    const relationshipData = {
      id: relationshipForm.id || generateId(),
      fromId: relationshipForm.fromId,
      toId: relationshipForm.toId,
      strength: relationshipForm.strength,
      qualities: relationshipForm.qualities
    };

    if (relationshipForm.id) {
      // Update existing relationship
      setRelationships(prev => prev.map(rel => 
        rel.id === relationshipForm.id ? relationshipData : rel
      ));
    } else {
      // Add new relationship
      setRelationships(prev => [...prev, relationshipData]);
    }
    
    closeModal();
  };

  const toggleExpanded = (id) => {
    setExpandedItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const addLink = () => {
    let url = prompt('Enter URL:');
    const title = prompt('Enter title:');
    
    if (url && title) {
      // Add protocol if missing
      if (!url.startsWith('http://') && !url.startsWith('https://')) {
        url = 'https://' + url;
      }
      
      // Validate URL format
      try {
        new URL(url);
        setFormData(prev => ({
          ...prev,
          links: [...prev.links, { url, title, id: generateId() }]
        }));
      } catch (error) {
        alert('Please enter a valid URL');
      }
    }
  };

  const removeLink = (linkId) => {
    setFormData(prev => ({
      ...prev,
      links: prev.links.filter(link => link.id !== linkId)
    }));
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setFormData(prev => ({
          ...prev,
          images: [...prev.images, {
            id: generateId(),
            name: file.name,
            data: e.target.result
          }]
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const removeImage = (imageId) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter(img => img.id !== imageId)
    }));
  };

  const exportToCSV = () => {
    const flattenTaxonomy = (items, result = []) => {
      items.forEach(item => {
        const relationships = relationships.filter(rel => rel.fromId === item.id || rel.toId === item.id);
        result.push({
          id: item.id,
          name: item.name,
          type: item.type,
          level: item.level,
          parentId: item.parentId || '',
          description: item.description || '',
          notes: item.notes || '',
          links: item.links?.map(l => `${l.title}: ${l.url}`).join('; ') || '',
          imageCount: item.images?.length || 0,
          relationshipCount: relationships.length
        });
        if (item.children) {
          flattenTaxonomy(item.children, result);
        }
      });
      return result;
    };

    const data = flattenTaxonomy(taxonomy);
    const headers = ['id', 'name', 'type', 'level', 'parentId', 'description', 'notes', 'links', 'imageCount', 'relationshipCount'];
    const csvContent = [headers.join(','), ...data.map(row => headers.map(header => `"${(row[header] || '').toString().replace(/"/g, '""')}"`).join(','))].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'leadership_taxonomy.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const renderTaxonomyItem = (item, level = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedItems.has(item.id);
    const typeConfig = itemTypes.find(t => t.value === item.type);
    const itemRelationships = relationships.filter(rel => rel.fromId === item.id || rel.toId === item.id);

    return (
      <div key={item.id} className="mb-2">
        <div 
          className="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200 hover:border-gray-300 transition-colors"
          style={{ marginLeft: `${level * 20}px` }}
        >
          <div className="flex items-center space-x-3 flex-1">
            {hasChildren && (
              <button
                onClick={() => toggleExpanded(item.id)}
                className="text-gray-400 hover:text-gray-600"
              >
                {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
              </button>
            )}
            {!hasChildren && <div className="w-4" />}
            
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-1">
                <h3 className="font-medium text-gray-900">{item.name}</h3>
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${typeConfig?.color}`}>
                  {typeConfig?.label}
                </span>
                {itemRelationships.length > 0 && (
                  <span className="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-600">
                    {itemRelationships.length} relations
                  </span>
                )}
              </div>
              {item.description && (
                <p className="text-sm text-gray-600 mb-1">{item.description}</p>
              )}
              <div className="flex items-center space-x-2 text-xs text-gray-500">
                {item.links?.length > 0 && (
                  <span className="flex items-center space-x-1">
                    <ExternalLink size={12} />
                    <span>{item.links.length} links</span>
                  </span>
                )}
                {item.images?.length > 0 && (
                  <span className="flex items-center space-x-1">
                    <Image size={12} />
                    <span>{item.images.length} images</span>
                  </span>
                )}
              </div>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => openModal('add', null, item.id)}
              className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
              title="Add child"
            >
              <Plus size={16} />
            </button>
            <button
              onClick={() => openModal('relationship', item)}
              className="p-1 text-gray-400 hover:text-green-600 transition-colors"
              title="Add relationship"
            >
              <Link2 size={16} />
            </button>
            <button
              onClick={() => openModal('edit', item)}
              className="p-1 text-gray-400 hover:text-yellow-600 transition-colors"
              title="Edit"
            >
              <Edit3 size={16} />
            </button>
            <button
              onClick={() => deleteItem(item.id)}
              className="p-1 text-gray-400 hover:text-red-600 transition-colors"
              title="Delete"
            >
              <Trash2 size={16} />
            </button>
          </div>
        </div>

        {hasChildren && isExpanded && (
          <div className="mt-2">
            {item.children.map(child => renderTaxonomyItem(child, level + 1))}
          </div>
        )}
      </div>
    );
  };

  const getAllItems = () => {
    const items = [];
    const traverse = (itemList) => {
      itemList.forEach(item => {
        items.push(item);
        if (item.children) traverse(item.children);
      });
    };
    traverse(taxonomy);
    return items;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Leadership Taxonomy Manager</h1>
          <p className="text-gray-600">Organize and manage leadership traits, characteristics, concepts, and stories</p>
        </div>

        {/* Actions Bar */}
        <div className="flex items-center justify-between mb-6 p-4 bg-white rounded-lg border border-gray-200">
          <button
            onClick={() => openModal('add')}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus size={20} />
            <span>Add Root Item</span>
          </button>

          <div className="flex items-center space-x-3">
            <button
              onClick={() => setShowRelationships(!showRelationships)}
              className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              <Link2 size={16} />
              <span>{showRelationships ? 'Hide' : 'Show'} Relationships</span>
            </button>
            <span className="text-sm text-gray-600">
              {taxonomy.length} root items, {getAllItems().length} total, {relationships.length} relationships
            </span>
            <button
              onClick={exportToCSV}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <Download size={16} />
              <span>Export CSV</span>
            </button>
          </div>
        </div>

        {/* Relationships Panel */}
        {showRelationships && relationships.length > 0 && (
          <div className="mb-6 p-4 bg-white rounded-lg border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Relationships</h3>
            <div className="space-y-3">
              {relationships.map(rel => {
                const fromItem = findItemById(rel.fromId);
                const toItem = findItemById(rel.toId);
                return (
                  <div key={rel.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className="font-medium text-gray-900">{fromItem?.name || 'Unknown'}</span>
                        <span className="text-gray-400">→</span>
                        <span className="font-medium text-gray-900">{toItem?.name || 'Unknown'}</span>
                        <span className="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                          Strength: {rel.strength}/10
                        </span>
                      </div>
                      {rel.qualities.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {rel.qualities.map(quality => (
                            <span key={quality} className="px-2 py-1 text-xs rounded-full bg-purple-100 text-purple-800">
                              {quality}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => openModal('editRelationship', rel)}
                        className="p-1 text-gray-400 hover:text-yellow-600 transition-colors"
                        title="Edit relationship"
                      >
                        <Edit3 size={16} />
                      </button>
                      <button
                        onClick={() => deleteRelationship(rel.id)}
                        className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                        title="Delete relationship"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Taxonomy Tree */}
        <div className="space-y-2">
          {taxonomy.length === 0 ? (
            <div className="text-center py-12 bg-white rounded-lg border border-gray-200">
              <div className="text-gray-400 mb-4">
                <Plus size={48} className="mx-auto" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No items yet</h3>
              <p className="text-gray-600 mb-4">Start building your leadership taxonomy</p>
              <button
                onClick={() => openModal('add')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Add First Item
              </button>
            </div>
          ) : (
            taxonomy.map(item => renderTaxonomyItem(item))
          )}
        </div>

        {/* Modal */}
        {showModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">
                  {modalType === 'add' ? 'Add New Item' : 
                   modalType === 'edit' ? 'Edit Item' : 
                   modalType === 'editRelationship' ? 'Edit Relationship' : 'Add Relationship'}
                </h2>

                {modalType !== 'relationship' && modalType !== 'editRelationship' ? (
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Name</label>
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({...formData, name: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Enter item name"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Type</label>
                      <select
                        value={formData.type}
                        onChange={(e) => setFormData({...formData, type: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        {itemTypes.map(type => (
                          <option key={type.value} value={type.value}>{type.label}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                      <textarea
                        value={formData.description}
                        onChange={(e) => setFormData({...formData, description: e.target.value})}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Brief description"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                      <textarea
                        value={formData.notes}
                        onChange={(e) => setFormData({...formData, notes: e.target.value})}
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Detailed notes and observations"
                      />
                    </div>

                    {/* Links */}
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="block text-sm font-medium text-gray-700">Links</label>
                        <button
                          onClick={addLink}
                          className="text-blue-600 hover:text-blue-700 text-sm"
                        >
                          + Add Link
                        </button>
                      </div>
                      {formData.links?.map(link => (
                        <div key={link.id} className="flex items-center justify-between p-2 bg-gray-50 rounded mb-2">
                          <div className="flex-1">
                            <div className="font-medium text-sm">{link.title}</div>
                            <a 
                              href={link.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-xs text-blue-600 hover:text-blue-800 underline"
                            >
                              {link.url}
                            </a>
                          </div>
                          <button
                            onClick={() => removeLink(link.id)}
                            className="text-red-600 hover:text-red-700 ml-2"
                          >
                            <Trash2 size={14} />
                          </button>
                        </div>
                      ))}
                    </div>

                    {/* Images */}
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <label className="block text-sm font-medium text-gray-700">Images</label>
                        <button
                          onClick={() => fileInputRef.current?.click()}
                          className="text-blue-600 hover:text-blue-700 text-sm"
                        >
                          + Add Image
                        </button>
                      </div>
                      <input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleImageUpload}
                        className="hidden"
                      />
                      <div className="grid grid-cols-3 gap-2">
                        {formData.images?.map(image => (
                          <div key={image.id} className="relative">
                            <img
                              src={image.data}
                              alt={image.name}
                              className="w-full h-20 object-cover rounded border"
                            />
                            <button
                              onClick={() => removeImage(image.id)}
                              className="absolute top-1 right-1 bg-red-600 text-white rounded-full p-1"
                            >
                              <Trash2 size={10} />
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">From</label>
                      <select
                        value={relationshipForm.fromId}
                        onChange={(e) => setRelationshipForm({...relationshipForm, fromId: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Select item</option>
                        {getAllItems().map(item => (
                          <option key={item.id} value={item.id}>{item.name}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">To</label>
                      <select
                        value={relationshipForm.toId}
                        onChange={(e) => setRelationshipForm({...relationshipForm, toId: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Select item</option>
                        {getAllItems().filter(item => item.id !== relationshipForm.fromId).map(item => (
                          <option key={item.id} value={item.id}>{item.name}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Strength: {relationshipForm.strength}/10
                      </label>
                      <input
                        type="range"
                        min="1"
                        max="10"
                        value={relationshipForm.strength}
                        onChange={(e) => setRelationshipForm({...relationshipForm, strength: parseInt(e.target.value)})}
                        className="w-full"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Qualities</label>
                      <div className="grid grid-cols-2 gap-2">
                        {relationshipQualities.map(quality => (
                          <label key={quality} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              checked={relationshipForm.qualities.includes(quality)}
                              onChange={(e) => {
                                if (e.target.checked) {
                                  setRelationshipForm({
                                    ...relationshipForm,
                                    qualities: [...relationshipForm.qualities, quality]
                                  });
                                } else {
                                  setRelationshipForm({
                                    ...relationshipForm,
                                    qualities: relationshipForm.qualities.filter(q => q !== quality)
                                  });
                                }
                              }}
                              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span className="text-sm">{quality}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Modal Actions */}
                <div className="flex items-center justify-end space-x-3 mt-6 pt-4 border-t border-gray-200">
                  <button
                    onClick={closeModal}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={modalType === 'relationship' ? addRelationship : addOrUpdateItem}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    {modalType === 'add' ? 'Add Item' : 
                     modalType === 'edit' ? 'Update Item' : 
                     modalType === 'editRelationship' ? 'Update Relationship' : 'Add Relationship'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LeadershipTaxonomyManager;
