import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs } from 'firebase/firestore';

// Ensure Tailwind CSS is available in the environment.
// This component assumes Tailwind CSS is configured.

// Global variables provided by the Canvas environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
// Updated firebaseConfig to include projectId: '1'
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { 
  apiKey: 1,
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
 };
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Initialize Firebase App
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Utility function to generate a random UUID for anonymous users
const generateUUID = () => crypto.randomUUID();

// Custom Modal Component
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto transform transition-all sm:my-8 sm:w-full">
                <div className="flex justify-between items-center p-4 border-b border-gray-200">
                    <h3 className="text-xl font-semibold text-gray-900">{title}</h3>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 focus:outline-none"
                    >
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div className="p-6">
                    {children}
                </div>
            </div>
        </div>
    );
};

// Confirmation Modal Component
const ConfirmModal = ({ Add PROFILE.md, onClose, onConfirm, message }) => {
    if (!isOpen) return null;

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Confirm Action">
            <p className="text-gray-700 mb-6">{message}</p>
            <div className="flex justify-end space-x-3">
                <button
                    onClick={onClose}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400"
                >
                    Cancel
                </button>
                <button
                    onClick={onConfirm}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
                >
                    Confirm
                </button>
            </div>
        </Modal>
    );
};

function App() {
    const [currentUser, setCurrentUser] = useState(null);
    const [elements, setElements] = useState([]);
    const [relationships, setRelationships] = useState([]);
    const [images, setImages] = useState([]);
    const [selectedElement, setSelectedElement] = useState(null);
    const [showElementModal, setShowElementModal] = useState(false);
    const [showRelationshipModal, setShowRelationshipModal] = useState(false);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [confirmAction, setConfirmAction] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [userId, setUserId] = useState(''); // Public or private user ID

    // Authenticate user and set up Firestore listeners
    useEffect(() => {
        const setupAuthAndListeners = async () => {
            try {
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        setCurrentUser(user);
                        setUserId(user.uid); // Use Firebase UID for authenticated users
                        console.log('Firebase User ID:', user.uid); // Display userId
                    } else {
                        // Fallback for unauthenticated users or if auth fails
                        const anonymousId = generateUUID();
                        setCurrentUser(null);
                        setUserId(anonymousId);
                        console.log('Anonymous User ID:', anonymousId); // Display userId
                    }
                    setLoading(false);
                });
            } catch (err) {
                console.error("Firebase Auth Error:", err);
                setError("Failed to authenticate with Firebase. Please try again.");
                setLoading(false);
                // Fallback to anonymous ID if auth fails
                setUserId(generateUUID());
            }
        };

        setupAuthAndListeners();
    }, []); // Run once on component mount

    // Firestore Listeners for real-time updates
    useEffect(() => {
        if (!userId) return; // Wait for userId to be set

        // Elements Listener
        const elementsCollectionRef = collection(db, `artifacts/${appId}/public/data/elements`);
        const unsubscribeElements = onSnapshot(elementsCollectionRef, (snapshot) => {
            const elementsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // Sort elements to ensure consistent order, e.g., by name
            elementsData.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
            setElements(elementsData);
            setError(''); // Clear error on successful data load
        }, (err) => {
            console.error("Error fetching elements:", err);
            setError("Failed to load taxonomy elements.");
        });

        // Relationships Listener
        const relationshipsCollectionRef = collection(db, `artifacts/${appId}/public/data/relationships`);
        const unsubscribeRelationships = onSnapshot(relationshipsCollectionRef, (snapshot) => {
            const relationshipsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setRelationships(relationshipsData);
            setError(''); // Clear error on successful data load
        }, (err) => {
            console.error("Error fetching relationships:", err);
            setError("Failed to load relationships.");
        });

        // Images Listener
        const imagesCollectionRef = collection(db, `artifacts/${appId}/public/data/images`);
        const unsubscribeImages = onSnapshot(imagesCollectionRef, (snapshot) => {
            const imagesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setImages(imagesData);
            setError(''); // Clear error on successful data load
        }, (err) => {
            console.error("Error fetching images:", err);
            setError("Failed to load images.");
        });

        // Cleanup listeners on unmount
        return () => {
            unsubscribeElements();
            unsubscribeRelationships();
            unsubscribeImages();
        };
    }, [userId]); // Re-run if userId changes

    // --- CRUD Operations for Elements ---
    const handleSaveElement = async (elementData) => {
        setLoading(true);
        try {
            if (elementData.id) {
                // Update existing element
                const elementRef = doc(db, `artifacts/${appId}/public/data/elements`, elementData.id);
                await updateDoc(elementRef, {
                    name: elementData.name,
                    description: elementData.description,
                    notes: elementData.notes,
                    links: elementData.links,
                    parent_id: elementData.parent_id || null,
                    updated_at: new Date(),
                });
            } else {
                // Create new element
                await addDoc(collection(db, `artifacts/${appId}/public/data/elements`), {
                    name: elementData.name,
                    description: elementData.description,
                    notes: elementData.notes,
                    links: elementData.links,
                    parent_id: elementData.parent_id || null,
                    created_at: new Date(),
                    updated_at: new Date(),
                });
            }
            setShowElementModal(false);
            setSelectedElement(null);
            setError(''); // Clear error on success
        } catch (err) {
            console.error("Error saving element:", err);
            setError("Failed to save element.");
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteElement = useCallback(async (elementId) => {
        setLoading(true);
        try {
            // Delete element
            await deleteDoc(doc(db, `artifacts/${appId}/public/data/elements`, elementId));

            // Delete associated relationships
            const qRels = query(collection(db, `artifacts/${appId}/public/data/relationships`),
                where("source_element_id", "==", elementId));
            const qRels2 = query(collection(db, `artifacts/${appId}/public/data/relationships`),
                where("target_element_id", "==", elementId));

            const relsSnapshot1 = await getDocs(qRels);
            relsSnapshot1.forEach(async (d) => await deleteDoc(d.ref));

            const relsSnapshot2 = await getDocs(qRels2);
            relsSnapshot2.forEach(async (d) => await deleteDoc(d.ref));

            // Delete associated images
            const qImages = query(collection(db, `artifacts/${appId}/public/data/images`),
                where("element_id", "==", elementId));
            const imagesSnapshot = await getDocs(qImages);
            imagesSnapshot.forEach(async (d) => await deleteDoc(d.ref));

            setShowConfirmModal(false);
            setSelectedElement(null);
            setError(''); // Clear error on success
        } catch (err) {
            console.error("Error deleting element:", err);
            setError("Failed to delete element.");
        } finally {
            setLoading(false);
        }
    }, [userId]); // userId dependency for Firestore path

    // --- CRUD Operations for Relationships ---
    const handleSaveRelationship = async (relationshipData) => {
        setLoading(true);
        try {
            if (relationshipData.id) {
                // Update existing relationship
                const relRef = doc(db, `artifacts/${appId}/public/data/relationships`, relationshipData.id);
                await updateDoc(relRef, {
                    source_element_id: relationshipData.source_element_id,
                    target_element_id: relationshipData.target_element_id,
                    quality: relationshipData.quality,
                    strength: relationshipData.strength,
                    notes: relationshipData.notes,
                });
            } else {
                // Create new relationship
                await addDoc(collection(db, `artifacts/${appId}/public/data/relationships`), {
                    source_element_id: relationshipData.source_element_id,
                    target_element_id: relationshipData.target_element_id,
                    quality: relationshipData.quality,
                    strength: relationshipData.strength,
                    notes: relationshipData.notes,
                    created_at: new Date(),
                });
            }
            setShowRelationshipModal(false);
            setError(''); // Clear error on success
        } catch (err) {
            console.error("Error saving relationship:", err);
            setError("Failed to save relationship.");
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteRelationship = useCallback(async (relationshipId) => {
        setLoading(true);
        try {
            await deleteDoc(doc(db, `artifacts/${appId}/public/data/relationships`, relationshipId));
            setShowConfirmModal(false);
            setError(''); // Clear error on success
        } catch (err) {
            console.error("Error deleting relationship:", err);
            setError("Failed to delete relationship.");
        } finally {
            setLoading(false);
        }
    }, [userId]);

    // --- Image Upload (Metadata only, actual image storage simulated) ---
    const handleUploadImage = async (elementId, file) => {
        setLoading(true);
        try {
            // In a real application, you would upload the file to Firebase Storage or AWS S3 here.
            // For this demo, we're just storing metadata and using a placeholder URL.
            const filename = file.name;
            const placeholderImageUrl = `https://placehold.co/150x100/A8DADC/333333?text=${encodeURIComponent(filename)}`;

            await addDoc(collection(db, `artifacts/${appId}/public/data/images`), {
                element_id: elementId,
                filename: filename,
                downloadURL: placeholderImageUrl, // Placeholder URL
                uploaded_at: new Date(),
            });
            setError(''); // Clear any previous error
        } catch (err) {
            console.error("Error uploading image metadata:", err);
            setError("Failed to upload image. (Note: actual image storage requires cloud service).");
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteImage = useCallback(async (imageId) => {
        setLoading(true);
        try {
            await deleteDoc(doc(db, `artifacts/${appId}/public/data/images`, imageId));
            setShowConfirmModal(false);
            setError(''); // Clear error on success
        } catch (err) {
            console.error("Error deleting image:", err);
            setError("Failed to delete image.");
        } finally {
            setLoading(false);
        }
    }, [userId]);

    // --- CSV Export ---
    const handleExportCsv = () => {
        if (elements.length === 0 && relationships.length === 0 && images.length === 0) {
            setError("No data to export.");
            return;
        }

        let csvContent = "";
        const headers = [
            "Type", "ID", "Name", "Description", "Notes", "Links", "Parent ID",
            "Relationship Source ID", "Relationship Source Name", "Relationship Target ID", "Relationship Target Name",
            "Relationship Quality", "Relationship Strength", "Relationship Notes",
            "Image ID", "Image Element ID", "Image Filename", "Image URL"
        ];
        csvContent += headers.join(",") + "\n";

        // Helper to escape CSV values
        const escapeCsv = (value) => {
            if (value === null || value === undefined) return "";
            let str = String(value);
            if (str.includes(",") || str.includes("\n") || str.includes('"')) {
                return `"${str.replace(/"/g, '""')}"`;
            }
            return str;
        };

        // Add elements
        elements.forEach(el => {
            const row = [
                escapeCsv("Element"),
                escapeCsv(el.id),
                escapeCsv(el.name),
                escapeCsv(el.description),
                escapeCsv(el.notes),
                escapeCsv(el.links ? el.links.join('|') : ''),
                escapeCsv(el.parent_id),
                "", "", "", "", "", "", "", "", "", "", "" // Empty for relationship/image fields
            ];
            csvContent += row.join(",") + "\n";
        });

        // Add relationships
        relationships.forEach(rel => {
            const sourceElement = elements.find(e => e.id === rel.source_element_id);
            const targetElement = elements.find(e => e.id === rel.target_element_id);
            const row = [
                escapeCsv("Relationship"),
                "", "", "", "", "", "", // Empty for element fields
                escapeCsv(rel.source_element_id),
                escapeCsv(sourceElement ? sourceElement.name : 'N/A'),
                escapeCsv(rel.target_element_id),
                escapeCsv(targetElement ? targetElement.name : 'N/A'),
                escapeCsv(rel.quality),
                escapeCsv(rel.strength),
                escapeCsv(rel.notes),
                "", "", "", "" // Empty for image fields
            ];
            csvContent += row.join(",") + "\n";
        });

        // Add images
        images.forEach(img => {
            const row = [
                escapeCsv("Image"),
                "", "", "", "", "", "", "", "", "", "", "", "", "", // Empty for element/relationship fields
                escapeCsv(img.id),
                escapeCsv(img.element_id),
                escapeCsv(img.filename),
                escapeCsv(img.downloadURL)
            ];
            csvContent += row.join(",") + "\n";
        });

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) { // Feature detection for download attribute
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'leadership_taxonomy.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url); // Clean up the URL object
            setError(''); // Clear error on success
        } else {
            setError('Your browser does not support downloading files directly. Please copy the content from console.');
            console.log(csvContent); // Fallback to console log
        }
    };

    // --- UI Handlers ---
    const openElementEdit = (element) => {
        setSelectedElement(element);
        setShowElementModal(true);
    };

    const openNewElement = () => {
        setSelectedElement(null);
        setShowElementModal(true);
    };

    const openRelationshipEditor = (sourceElementId = null) => {
        // Pre-fill source if opened from an element's detail
        setSelectedElement(prev => ({ ...prev, tempSourceId: sourceElementId }));
        setShowRelationshipModal(true);
    };

    const closeAllModals = () => {
        setShowElementModal(false);
        setShowRelationshipModal(false);
        setShowConfirmModal(false);
        setSelectedElement(null); // Clear selected element when closing modals
    };

    const confirmDeletion = (action, id) => {
        setConfirmAction(() => () => {
            if (action === 'element') handleDeleteElement(id);
            if (action === 'relationship') handleDeleteRelationship(id);
            if (action === 'image') handleDeleteImage(id);
        });
        setShowConfirmModal(true);
    };

    // Recursive component to render taxonomy tree
    const renderElementTree = (parentId = null) => {
        const children = elements.filter(el => el.parent_id === parentId);
        return (
            <ul className={parentId === null ? 'space-y-2' : 'ml-6 space-y-2 border-l border-gray-300 pl-4'}>
                {children.map(el => (
                    <li key={el.id} className="relative">
                        <div
                            className="flex items-center justify-between p-3 bg-white rounded-md shadow-sm hover:bg-gray-50 cursor-pointer transition-colors"
                            onClick={() => openElementEdit(el)}
                        >
                            <span className="font-medium text-gray-800">{el.name}</span>
                            <div className="flex space-x-2">
                                <button
                                    onClick={(e) => { e.stopPropagation(); openElementEdit(el); }}
                                    className="p-1 text-blue-600 hover:text-blue-800 rounded-full hover:bg-blue-100 transition-colors"
                                    title="Edit Element"
                                >
                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                </button>
                                <button
                                    onClick={(e) => { e.stopPropagation(); confirmDeletion('element', el.id); }}
                                    className="p-1 text-red-600 hover:text-red-800 rounded-full hover:bg-red-100 transition-colors"
                                    title="Delete Element"
                                >
                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                </button>
                            </div>
                        </div>
                        {renderElementTree(el.id)}
                    </li>
                ))}
            </ul>
        );
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100">
                <div className="text-center text-gray-600">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mb-4 mx-auto"></div>
                    Loading application...
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-100 text-gray-900 font-inter">
            <header className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-4 shadow-lg">
                <div className="container mx-auto flex justify-between items-center">
                    <h1 className="text-3xl font-bold">Leadership Taxonomy Manager</h1>
                    <div className="text-sm">
                        User ID: <span className="font-mono bg-blue-700 px-2 py-1 rounded-md">{userId}</span>
                    </div>
                </div>
            </header>

            <main className="container mx-auto p-6 grid grid-cols-1 lg:grid-cols-3 gap-8">
                {error && (
                    <div className="lg:col-span-3 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <strong className="font-bold">Error!</strong>
                        <span className="block sm:inline"> {error}</span>
                        <span className="absolute top-0 bottom-0 right-0 px-4 py-3">
                            <svg onClick={() => setError('')} className="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
                        </span>
                    </div>
                )}

                {/* Left Panel: Taxonomy Tree */}
                <section className="lg:col-span-1 bg-white rounded-lg shadow-md p-6">
                    <h2 className="text-2xl font-semibold mb-4 text-gray-800">Taxonomy Elements</h2>
                    <div className="flex flex-col space-y-4">
                        <button
                            onClick={openNewElement}
                            className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-colors shadow-sm"
                        >
                            + Add New Element
                        </button>
                        <button
                            onClick={handleExportCsv}
                            className="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400 transition-colors shadow-sm"
                        >
                            Export as CSV
                        </button>
                    </div>

                    <div className="mt-6 border-t border-gray-200 pt-6">
                        {elements.length === 0 ? (
                            <p className="text-gray-500 text-center">No elements yet. Add one to get started!</p>
                        ) : (
                            renderElementTree()
                        )}
                    </div>
                </section>

                {/* Right Panel: Element Details / Relationship Editor */}
                <section className="lg:col-span-2 bg-white rounded-lg shadow-md p-6">
                    <h2 className="text-2xl font-semibold mb-4 text-gray-800">
                        {selectedElement ? `Details for: ${selectedElement.name}` : 'Select an Element or Add New'}
                    </h2>

                    {selectedElement && (
                        <div className="space-y-6">
                            {/* Element Details */}
                            <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                                <h3 className="text-xl font-semibold text-gray-700 mb-3">Element Information</h3>
                                <p className="mb-2"><strong className="text-gray-600">Description:</strong> {selectedElement.description || 'N/A'}</p>
                                <p className="mb-2"><strong className="text-gray-600">Notes:</strong> {selectedElement.notes || 'N/A'}</p>
                                <div className="mb-2">
                                    <strong className="text-gray-600">Links:</strong>
                                    {selectedElement.links && selectedElement.links.length > 0 && selectedElement.links[0] !== '' ? (
                                        <ul className="list-disc list-inside ml-4">
                                            {selectedElement.links.map((link, idx) => link && (
                                                <li key={idx}><a href={link} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">{link}</a></li>
                                            ))}
                                        </ul>
                                    ) : 'N/A'}
                                </div>
                                <p><strong className="text-gray-600">Parent:</strong> {selectedElement.parent_id ? (elements.find(e => e.id === selectedElement.parent_id)?.name || 'Unknown') : 'None'}</p>
                                <button
                                    onClick={() => openElementEdit(selectedElement)}
                                    className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-colors"
                                >
                                    Edit Element
                                </button>
                            </div>

                            {/* Images Section */}
                            <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                                <h3 className="text-xl font-semibold text-gray-700 mb-3">Images</h3>
                                <input
                                    type="file"
                                    accept="image/*"
                                    onChange={(e) => {
                                        if (e.target.files[0]) {
                                            handleUploadImage(selectedElement.id, e.target.files[0]);
                                            e.target.value = null; // Clear input
                                        }
                                    }}
                                    className="mb-4 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                                />
                                <div className="flex flex-wrap gap-4">
                                    {images.filter(img => img.element_id === selectedElement.id).length > 0 ? (
                                        images.filter(img => img.element_id === selectedElement.id).map(img => (
                                            <div key={img.id} className="relative group border border-gray-200 rounded-md overflow-hidden shadow-sm">
                                                <img src={img.downloadURL} alt={img.filename} className="w-24 h-24 object-cover rounded-md" />
                                                <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                                    <button
                                                        onClick={() => confirmDeletion('image', img.id)}
                                                        className="p-1 text-white hover:text-red-300 rounded-full"
                                                        title="Delete Image"
                                                    >
                                                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                                    </button>
                                                </div>
                                                <p className="text-xs text-gray-600 p-1 truncate">{img.filename}</p>
                                            </div>
                                        ))
                                    ) : (
                                        <p className="text-gray-500 text-sm">No images uploaded for this element.</p>
                                    )}
                                </div>
                            </div>

                            {/* Relationships Section */}
                            <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                                <h3 className="text-xl font-semibold text-gray-700 mb-3">Relationships</h3>
                                <button
                                    onClick={() => openRelationshipEditor(selectedElement.id)}
                                    className="mb-4 px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-400 transition-colors"
                                >
                                    + Add New Relationship
                                </button>

                                <h4 className="font-semibold text-gray-700 mt-4 mb-2">Outgoing Relationships:</h4>
                                {relationships.filter(rel => rel.source_element_id === selectedElement.id).length > 0 ? (
                                    <ul className="space-y-2">
                                        {relationships.filter(rel => rel.source_element_id === selectedElement.id).map(rel => {
                                            const targetEl = elements.find(el => el.id === rel.target_element_id);
                                            return (
                                                <li key={rel.id} className="bg-white p-3 rounded-md shadow-sm border border-gray-200 flex justify-between items-center">
                                                    <div>
                                                        <p>
                                                            <span className="font-medium">{rel.quality}</span>{' '}
                                                            <span className="text-blue-600">"{targetEl ? targetEl.name : 'Unknown Element'}"</span>
                                                        </p>
                                                        <p className="text-sm text-gray-600">Strength: {rel.strength || 'N/A'}</p>
                                                        {rel.notes && <p className="text-sm text-gray-600">Notes: {rel.notes}</p>}
                                                    </div>
                                                    <button
                                                        onClick={() => confirmDeletion('relationship', rel.id)}
                                                        className="p-1 text-red-600 hover:text-red-800 rounded-full hover:bg-red-100 transition-colors"
                                                        title="Delete Relationship"
                                                    >
                                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                                    </button>
                                                </li>
                                            );
                                        })}
                                    </ul>
                                ) : (
                                    <p className="text-gray-500 text-sm">No outgoing relationships defined.</p>
                                )}

                                <h4 className="font-semibold text-gray-700 mt-6 mb-2">Incoming Relationships:</h4>
                                {relationships.filter(rel => rel.target_element_id === selectedElement.id).length > 0 ? (
                                    <ul className="space-y-2">
                                        {relationships.filter(rel => rel.target_element_id === selectedElement.id).map(rel => {
                                            const sourceEl = elements.find(el => el.id === rel.source_element_id);
                                            return (
                                                <li key={rel.id} className="bg-white p-3 rounded-md shadow-sm border border-gray-200 flex justify-between items-center">
                                                    <div>
                                                        <p>
                                                            <span className="text-blue-600">"{sourceEl ? sourceEl.name : 'Unknown Element'}"</span>{' '}
                                                            <span className="font-medium">{rel.quality}</span> this element
                                                        </p>
                                                        <p className="text-sm text-gray-600">Strength: {rel.strength || 'N/A'}</p>
                                                        {rel.notes && <p className="text-sm text-gray-600">Notes: {rel.notes}</p>}
                                                    </div>
                                                    <button
                                                        onClick={() => confirmDeletion('relationship', rel.id)}
                                                        className="p-1 text-red-600 hover:text-red-800 rounded-full hover:bg-red-100 transition-colors"
                                                        title="Delete Relationship"
                                                    >
                                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                                    </button>
                                                </li>
                                            );
                                        })}
                                    </ul>
                                ) : (
                                    <p className="text-gray-500 text-sm">No incoming relationships defined.</p>
                                )}
                            </div>
                        </div>
                    )}
                </section>
            </main>

            {/* Element Form Modal */}
            <Modal isOpen={showElementModal} onClose={closeAllModals} title={selectedElement ? 'Edit Taxonomy Element' : 'Create New Taxonomy Element'}>
                <ElementForm
                    element={selectedElement}
                    elements={elements} // Pass all elements for parent selection
                    onSave={handleSaveElement}
                    onCancel={closeAllModals}
                />
            </Modal>

            {/* Relationship Form Modal */}
            <Modal isOpen={showRelationshipModal} onClose={closeAllModals} title="Manage Relationship">
                <RelationshipForm
                    sourceElementId={selectedElement?.tempSourceId} // Pre-fill if opened from element detail
                    elements={elements}
                    onSave={handleSaveRelationship}
                    onCancel={closeAllModals}
                />
            </Modal>

            {/* Confirmation Modal */}
            <ConfirmModal
                isOpen={showConfirmModal}
                onClose={() => setShowConfirmModal(false)}
                onConfirm={() => { if (confirmAction) confirmAction(); }}
                message="Are you sure you want to delete this item? This action cannot be undone."
            />
        </div>
    );
}

// ElementForm Component
const ElementForm = ({ element, elements, onSave, onCancel }) => {
    const [name, setName] = useState(element?.name || '');
    const [description, setDescription] = useState(element?.description || '');
    const [notes, setNotes] = useState(element?.notes || '');
    const [links, setLinks] = useState(element?.links && element.links.length > 0 ? element.links : ['']);
    const [parentId, setParentId] = useState(element?.parent_id || '');

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave({
            id: element?.id,
            name,
            description,
            notes,
            links: links.filter(link => link.trim() !== ''), // Filter out empty links
            parent_id: parentId === '' ? null : parentId,
        });
    };

    const handleLinkChange = (index, value) => {
        const newLinks = [...links];
        newLinks[index] = value;
        setLinks(newLinks);
    };

    const handleAddLink = () => {
        setLinks([...links, '']);
    };

    const handleRemoveLink = (index) => {
        const newLinks = links.filter((_, i) => i !== index);
        setLinks(newLinks.length === 0 ? [''] : newLinks); // Ensure at least one empty input
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
                <input
                    type="text"
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                />
            </div>
            <div>
                <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
                <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    rows="3"
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                ></textarea>
            </div>
            <div>
                <label htmlFor="notes" className="block text-sm font-medium text-gray-700">Notes</label>
                <textarea
                    id="notes"
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    rows="2"
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                ></textarea>
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Links</label>
                {links.map((link, index) => (
                    <div key={index} className="flex items-center space-x-2 mb-2">
                        <input
                            type="url"
                            value={link}
                            onChange={(e) => handleLinkChange(index, e.target.value)}
                            placeholder="https://example.com"
                            className="block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                        {links.length > 1 && (
                            <button
                                type="button"
                                onClick={() => handleRemoveLink(index)}
                                className="text-red-500 hover:text-red-700 p-1 rounded-full hover:bg-red-50"
                            >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                            </button>
                        )}
                    </div>
                ))}
                <button
                    type="button"
                    onClick={handleAddLink}
                    className="mt-2 px-3 py-1 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 text-sm"
                >
                    Add Link
                </button>
            </div>
            <div>
                <label htmlFor="parent_id" className="block text-sm font-medium text-gray-700">Parent Element</label>
                <select
                    id="parent_id"
                    value={parentId}
                    onChange={(e) => setParentId(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                >
                    <option value="">-- None --</option>
                    {elements.filter(el => el.id !== element?.id).map(el => ( // Cannot be its own parent
                        <option key={el.id} value={el.id}>{el.name}</option>
                    ))}
                </select>
            </div>
            <div className="flex justify-end space-x-3 mt-6">
                <button
                    type="button"
                    onClick={onCancel}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400"
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    {element ? 'Update Element' : 'Create Element'}
                </button>
            </div>
        </form>
    );
};

// RelationshipForm Component
const RelationshipForm = ({ sourceElementId, elements, onSave, onCancel }) => {
    const [sourceId, setSourceId] = useState(sourceElementId || '');
    const [targetId, setTargetId] = useState('');
    const [quality, setQuality] = useState('');
    const [strength, setStrength] = useState(3); // Default strength
    const [notes, setNotes] = useState('');
    const [relationshipError, setRelationshipError] = useState(''); // New state for relationship form error

    // Pre-defined relationship qualities
    const relationshipQualities = [
        "is a sub-category of",
        "is an example of",
        "is related to",
        "supports",
        "contradicts",
        "is a prerequisite for",
        "is a consequence of",
        "is a component of"
    ];

    const handleSubmit = (e) => {
        e.preventDefault();
        setRelationshipError(''); // Clear previous errors

        if (sourceId === targetId) {
            setRelationshipError('Source and target elements cannot be the same.');
            return;
        }
        onSave({
            source_element_id: sourceId,
            target_element_id: targetId,
            quality,
            strength,
            notes,
        });
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            {relationshipError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                    <strong className="font-bold">Error!</strong>
                    <span className="block sm:inline"> {relationshipError}</span>
                </div>
            )}
            <div>
                <label htmlFor="source_id" className="block text-sm font-medium text-gray-700">Source Element</label>
                <select
                    id="source_id"
                    value={sourceId}
                    onChange={(e) => setSourceId(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-purple-500 focus:border-purple-500"
                    required
                >
                    <option value="">-- Select Source --</option>
                    {elements.map(el => (
                        <option key={el.id} value={el.id}>{el.name}</option>
                    ))}
                </select>
            </div>
            <div>
                <label htmlFor="target_id" className="block text-sm font-medium text-gray-700">Target Element</label>
                <select
                    id="target_id"
                    value={targetId}
                    onChange={(e) => setTargetId(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-purple-500 focus:border-purple-500"
                    required
                >
                    <option value="">-- Select Target --</option>
                    {elements.map(el => (
                        <option key={el.id} value={el.id}>{el.name}</option>
                    ))}
                </select>
            </div>
            <div>
                <label htmlFor="quality" className="block text-sm font-medium text-gray-700">Relationship Quality</label>
                <select
                    id="quality"
                    value={quality}
                    onChange={(e) => setQuality(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-purple-500 focus:border-purple-500"
                    required
                >
                    <option value="">-- Select Quality --</option>
                    {relationshipQualities.map((q, idx) => (
                        <option key={idx} value={q}>{q}</option>
                    ))}
                </select>
            </div>
            <div>
                <label htmlFor="strength" className="block text-sm font-medium text-gray-700">Strength (1-5)</label>
                <input
                    type="range"
                    id="strength"
                    min="1"
                    max="5"
                    step="1"
                    value={strength}
                    onChange={(e) => setStrength(parseInt(e.target.value))}
                    className="mt-1 block w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer range-sm"
                />
                <div className="text-center text-sm text-gray-600 mt-1">Strength: {strength}</div>
            </div>
            <div>
                <label htmlFor="notes" className="block text-sm font-medium text-gray-700">Notes (Optional)</label>
                <textarea
                    id="notes"
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    rows="2"
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-purple-500 focus:border-purple-500"
                ></textarea>
            </div>
            <div className="flex justify-end space-x-3 mt-6">
                <button
                    type="button"
                    onClick={onCancel}
                    className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400"
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                    Save Relationship
                </button>
            </div>
        </form>
    );
};

export default App;
